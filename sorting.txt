SORTING

Sorting is nothing but arranging the data in ascending or descending order. The term sorting came into picture, as humans realised the importance of searching quickly.

There are so many things in our real life that we need to search for, like a particular record in database, roll numbers in merit list, a particular telephone number in telephone directory, a particular page in a book etc. All this would have been a mess if the data was kept unordered and unsorted, but fortunately the concept of sorting came into existence, making it easier for everyone to arrange data in an order, hence making it easier to search.

Sorting arranges data in a sequence which makes searching easier.



Sorting Efficiency
If you ask me, how will I arrange a deck of shuffled cards in order, I would say, I will start by checking every card, and making the deck as I move on.

It can take me hours to arrange the deck in order, but that's how I will do it.

Well, thank god, computers don't work like this.

Since the beginning of the programming age, computer scientists have been working on solving the problem of sorting by coming up with various different algorithms to sort data.

The two main criterias to judge which algorithm is better than the other have been:

Time taken to sort the given data.
Memory Space required to do so.



BUBBLE SORT


Optimized Bubble Sort –
Optimized bubble sort is basically a smarter version of bubble sort algorithm. Hence the algorithm is same with a mechanism to determine whether the list/array DS is sorted or not after every iteration
This ensures that the algorithm only runs till the array/list is sorted.
Regular bubble sort runs iterations which are equal to the size of the array irrespective of whether the array is sorted before those number of iterations or not.
In optimized bubble sort, we have a flag variable that keeps track of whether the list is completely sorted or not.
In optimized bubble sort, whenever there is a swapping in any iteration, it means that the array/list is still not sorted & hence the flag is set to FALSE.
Whenever there is no swapping in a particular iteration, the flag is set to TRUE
At the end of every iteration, this flag variable is checked. If value is true, it means swapping happened & hence the list isn’t sorted completely so next iteration is allowed. If value is false, it means swapping never happened, hence the list is already sorted & there is no point in further iterations hence exit algorithm.

// steps for it
working –
Step 1 – Starting with the first element(index = 0), compare the current element with the next element of the array. Set flag = false
Step 2 – If the current element is greater than the next element of the array, swap them. Set flag = true
Step 3 – If the current element is less than the next element, move to the next element.
Step 4 – At end of iteration check flag, if true, continue iteration else exit iterations.
Step 4 – Repeat Step 1 till the list is sorted.
